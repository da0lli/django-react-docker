version: "3.2"
services:
  backend:
    build: ./backend
    volumes:
      - ./backend:/app/backend
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true
    command: python3 manage.py runserver 0.0.0.0:8000
      #  gunicorn DRF_Server.wsgi:application --bind 0.0.0.0:8000 
  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      # One-way volume to use node_modules from inside image
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    command: npm start

# services:

#   django:
#     build: .
#     container_name: django
#     command: gunicorn gcoDocker.wsgi:application --bind 0.0.0.0:8000 
#     volumes:
#       - .:/app
#     ports:
#       - "8000:8000"
#     env_file:
#       - .env
#     depends_on:
#       - pgdb
#   frontend: 
#     build: ./frontend
#     volumes:
#       -  frontend_build:/frontend/build

#   pgdb:
#     image: postgres
#     container_name: pgdb
#     environment:
#       - POSTGRES_DB=postgres
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#     volumes:
#     - pgdata:/var/lib/postgresql/data/

#   nginx:
#     build: ./nginx
#     volumes: 
#       - ./nginx:/app/
#       - frontend_build:/var/www/frontend
#     # links:
#     #   - django:django
#     ports: 
#       - "80:8080"
#     depends_on:
#       - django
#       - frontend
# volumes:
#   pgdata:
#   frontend_build:
